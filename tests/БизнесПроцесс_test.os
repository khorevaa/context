#использовать "../src"
#Использовать asserts
#Использовать logos

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;

	ИменаТестов = Новый Массив;

	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуПростогоБизнесПроцесс");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуБизнесПроцессСОшибкой");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуБизнесПроцессаСНесколькимиЗадачами");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуБизнесПроцессСОшибкойИНесколькимиЗадачамиОстановка");
	
	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуЗадачуСПараметрами");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуЗадачуСКонтекстом");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуЗадачуСКонтекстомИПараметрами");

	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуЗадачуСвоимОбработчикомОшибки");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьРаботуБизнесПроцессСОшибкойИНесколькимиЗадачамиПродолжение");

	Возврат ИменаТестов;

КонецФункции

#Область Реализованные_тесты

Процедура ТестДолжен_ПроверитьРаботуПростогоБизнесПроцесс() Экспорт

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураБезПараметров");
	БизнесПроцесс.Запустить();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	// TODO: Проверить отсуствие ошибки
	// Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен")._Истина());


КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуБизнесПроцессСОшибкой() Экспорт

	МассивПараметровЗадачи = Новый Массив();
	МассивПараметровЗадачи.Добавить("Параметр1ИзМассива");

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураИсключение", МассивПараметровЗадачи);
	БизнесПроцесс.Запустить();

	ОписаниеОшибки = БизнесПроцесс.ПолучитьОписаниеОшибки();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	Ожидаем.Что(ОписаниеОшибки, "Бизнес процесс должен быть завершен").Не_().ЕстьНеопределено();
	
	Ожидаем.Что(ОписаниеОшибки.Ошибка.Описание, "Ошибка должна совпадать").Равно(МассивПараметровЗадачи[0]);
	Ожидаем.Что(ОписаниеОшибки.Задача.Наименование(), "Задача должна совпадать").Равно("Задача1");
	Ожидаем.Что(ОписаниеОшибки.БизнесПроцесс, "БизнесПроцесс должна совпадать").Равно(БизнесПроцесс);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуБизнесПроцессСОшибкойИНесколькимиЗадачамиОстановка() Экспорт
	
	МассивПараметровЗадачи = Новый Массив();
	МассивПараметровЗадачи.Добавить("Параметр1ИзМассива");

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	КонтекстВыполнения = БизнесПроцесс.ПолучитьКонтекст();
	КонтекстВыполнения.Добавить("Счетчик", 0);

	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураПриращенияКонтекста", , КонтекстВыполнения);
	БизнесПроцесс.ДобавитьЗадачу("Задача2", ЭтотОбъект, "ПроцедураИсключение", МассивПараметровЗадачи);
	БизнесПроцесс.ДобавитьЗадачу("Задача3", ЭтотОбъект, "ПроцедураПриращенияКонтекста", , КонтекстВыполнения);
	БизнесПроцесс.Запустить();

	ОписаниеОшибки = БизнесПроцесс.ПолучитьОписаниеОшибки();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	Ожидаем.Что(ОписаниеОшибки, "Бизнес процесс должен быть завершен").Не_().ЕстьНеопределено();
	
	Ожидаем.Что(ОписаниеОшибки.Ошибка.Описание, "Ошибка должна совпадать").Равно(МассивПараметровЗадачи[0]);
	Ожидаем.Что(ОписаниеОшибки.Задача.Наименование(), "Задача должна совпадать").Равно("Задача2");
	Ожидаем.Что(ОписаниеОшибки.БизнесПроцесс, "БизнесПроцесс должна совпадать").Равно(БизнесПроцесс);

	Ожидаем.Что(КонтекстВыполнения.Получить("Счетчик"), "Счетчик выполнения не корректный").Равно(1);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуБизнесПроцессСОшибкойИНесколькимиЗадачамиПродолжение() Экспорт
	
	МассивПараметровЗадачи = Новый Массив();
	МассивПараметровЗадачи.Добавить("Параметр1ИзМассива");

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	КонтекстВыполнения = БизнесПроцесс.ПолучитьКонтекст();
	КонтекстВыполнения.Добавить("Счетчик", 0);

	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураПриращенияКонтекста", , КонтекстВыполнения);
	БизнесПроцесс.ДобавитьЗадачу("Задача2", ЭтотОбъект, "ПроцедураИсключение", МассивПараметровЗадачи);
	БизнесПроцесс.ДобавитьЗадачу("Задача3", ЭтотОбъект, "ПроцедураПриращенияКонтекста", , КонтекстВыполнения);
	
	БизнесПроцесс.ПриОшибкеВыполненияЗадачи(ЭтотОбъект, "ПриОшибкеВыполненияЗадачи_Продолжить");
	
	БизнесПроцесс.Запустить();

	
	ОписаниеОшибки = БизнесПроцесс.ПолучитьОписаниеОшибки();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	Ожидаем.Что(КонтекстВыполнения.Получить("Счетчик"), "Счетчик выполнения не корректный").Равно(2);

	Ожидаем.Что(ОписаниеОшибки, "Бизнес процесс должен быть завершен").ЕстьНеопределено();

КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуБизнесПроцессаСНесколькимиЗадачами() Экспорт

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураБезПараметров");
	БизнесПроцесс.ДобавитьЗадачу("Задача2", ЭтотОбъект, "ПроцедураБезПараметров");
	БизнесПроцесс.ДобавитьЗадачу("Задача3", ЭтотОбъект, "ПроцедураБезПараметров");
	БизнесПроцесс.Запустить();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	// TODO: Проверить отсуствие ошибки
	// Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен")._Истина());


КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуЗадачуСПараметрами() Экспорт

	МассивПараметровЗадачи = Новый Массив();
	МассивПараметровЗадачи.Добавить("Параметр1ИзМассива");

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураСПараметрами", МассивПараметровЗадачи);
	БизнесПроцесс.Запустить();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	// TODO: Проверить отсуствие ошибки
	// Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен")._Истина());


КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуЗадачуСКонтекстом() Экспорт

	КонтекстВыполнения = Новый КонтекстВыполнения;

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураПомещенияВКонтекст", , КонтекстВыполнения);
	БизнесПроцесс.ДобавитьЗадачу("Задача2", ЭтотОбъект, "ПроцедураПолученияИзКонтекста", , КонтекстВыполнения);
	БизнесПроцесс.Запустить();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	// TODO: Проверить отсуствие ошибки
	// Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен")._Истина());

КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуЗадачуСКонтекстомИПараметрами() Экспорт

	МассивПараметровЗадачи = Новый Массив();
	МассивПараметровЗадачи.Добавить("Параметр1ИзМассива");

	КонтекстВыполнения = Новый КонтекстВыполнения;

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");
	БизнесПроцесс.ДобавитьЗадачу("Задача1", ЭтотОбъект, "ПроцедураПомещенияВКонтекстЗначения", МассивПараметровЗадачи, КонтекстВыполнения);
	БизнесПроцесс.ДобавитьЗадачу("Задача2", ЭтотОбъект, "ПроцедураПолученияИзКонтекстаЗначения", МассивПараметровЗадачи, КонтекстВыполнения);
	БизнесПроцесс.Запустить();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	// TODO: Проверить отсуствие ошибки
	// Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен")._Истина());

КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуЗадачуСвоимОбработчикомОшибки() Экспорт
	
	МассивПараметровЗадачи = Новый Массив();
	МассивПараметровЗадачи.Добавить("Параметр1ИзМассива");

	БизнесПроцесс = Новый БизнесПроцесс("Тестовый бизнес процесс");

	Задача1 = БизнесПроцесс.НоваяЗадача("Задача1", ЭтотОбъект, "ПроцедураИсключение", МассивПараметровЗадачи);

	Задача1.ПриОшибке(ЭтотОбъект, "ОбработкаОшибкиЗадачи");

	БизнесПроцесс.Запустить();

	ОписаниеОшибки = БизнесПроцесс.ПолучитьОписаниеОшибки();

	Ожидаем.Что(БизнесПроцесс.Завершен(), "Бизнес процесс должен быть завершен").ЕстьИстина();
	Ожидаем.Что(ОписаниеОшибки, "Бизнес процесс должен быть завершен").Не_().ЕстьНеопределено();
	

КонецПроцедуры

#КонецОбласти



#Область Методы_задач

Процедура ПроцедураПомещенияВКонтекст(КонтекстВыполнения) Экспорт

	КонтекстВыполнения.Добавить("Задача1", Истина);
	
КонецПроцедуры

Процедура ПроцедураПриращенияКонтекста(КонтекстВыполнения) Экспорт

	Счетчик = КонтекстВыполнения.Получить("Счетчик");
	
	КонтекстВыполнения.Добавить("Счетчик", Счетчик + 1);
	
КонецПроцедуры

Процедура ПроцедураПомещенияВКонтекстЗначения(КонтекстВыполнения, Значение1) Экспорт

	КонтекстВыполнения.Добавить("Задача1", Значение1);
	
КонецПроцедуры

Процедура ПроцедураПолученияИзКонтекстаЗначения(КонтекстВыполнения, Значение1) Экспорт

	Задача1 = КонтекстВыполнения.Получить("Задача1");
	
	Ожидаем.Что(Задача1, "Значение в контексте корректное").Равно(Значение1);

КонецПроцедуры

Процедура ПроцедураПолученияИзКонтекста(КонтекстВыполнения) Экспорт

	Задача1 = КонтекстВыполнения.Получить("Задача1");
	
	Ожидаем.Что(Задача1, "Значение в контексте корректное").ЕстьИстина();

КонецПроцедуры

Процедура ПроцедураБезПараметров() Экспорт
	
	Лог.Информация("Выполняется процедура <%1>", "ПроцедураБезПараметров");

КонецПроцедуры

Процедура ПроцедураИсключение(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;

КонецПроцедуры


Процедура ПроцедураСПараметрами(Параметр1) Экспорт
	
	Лог.Информация("Выполняется процедура <%1> с параметром <%2>", "ПроцедураСПараметрами", Параметр1);

КонецПроцедуры

Процедура ПриОшибкеВыполненияЗадачи_Продолжить(ЗадачаБизнесПроцесса, ПродолжитьВыполнение, СтандартнаяОбработка) Экспорт

	// Если ЗадачаБизнесПроцесса.Наименование() = "Задача2"  Тогда

	ПродолжитьВыполнение = Истина;
	СтандартнаяОбработка = Ложь;

	// КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОшибкиЗадачи(ЗадачаБизнесПроцесса) Экспорт

	Лог.Информация("Обработка ошибки задачи <%1>", ЗадачаБизнесПроцесса.Наименование());

КонецПроцедуры


#КонецОбласти

Лог = Логирование.ПолучитьЛог("oscript.lib.context.testing");



