
#Использовать types

Перем ВнутреннийКонтекст;

#Область Помещение_в_контекст

// Помещает значение для ключа в контекст
// синоним метода, <ПоместитьВКонтекст>
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//   ЗначениеКонтекста - Произвольный - значение ключа контекста
//
//  Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция В_(Знач КлючКонтекста, ЗначениеКонтекста) Экспорт

	Возврат ПоместитьВКонтекст(КлючКонтекста, ЗначениеКонтекста);

КонецФункции

// Помещает значение для ключа в контекст
// синоним метода, <ПоместитьВКонтекст>
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//   ЗначениеКонтекста - Произвольный - значение ключа контекста
//
//  Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция Вставить(Знач КлючКонтекста, ЗначениеКонтекста) Экспорт

	Возврат ПоместитьВКонтекст(КлючКонтекста, ЗначениеКонтекста);

КонецФункции

// Помещает значение для ключа в контекст
// синоним метода, <ПоместитьВКонтекст>
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//   ЗначениеКонтекста - Произвольный - значение ключа контекста
//
//  Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция Поместить(Знач КлючКонтекста, ЗначениеКонтекста) Экспорт

	Возврат ПоместитьВКонтекст(КлючКонтекста, ЗначениеКонтекста);;

КонецФункции

// Помещает значение для ключа в контекст
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//   ЗначениеКонтекста - Произвольный - значение ключа контекста
//
//  Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция ПоместитьВКонтекст(Знач КлючКонтекста, ЗначениеКонтекста) Экспорт

	ПоложитьВоВнутреннийКонтекст(КлючКонтекста, ЗначениеКонтекста);

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет ключи и значения для ключей в контекст
//
// Параметры:
//   КлючиКонтекста - Строка - имена ключей контекста, например, <"Ключ1, Ключ2, Ключ3">
//   Значение1 - Произвольный - значение ключа контекста
//   Значение2 - Произвольный - значение ключа контекста
//   Значение3 - Произвольный - значение ключа контекста
//   Значение4 - Произвольный - значение ключа контекста
//   Значение5 - Произвольный - значение ключа контекста
//   Значение6 - Произвольный - значение ключа контекста
//   Значение7 - Произвольный - значение ключа контекста
//   Значение8 - Произвольный - значение ключа контекста
//   Значение9 - Произвольный - значение ключа контекста
//
// Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция ДобавитьВКонтекст(Знач КлючиКонтекста, Значение1 = Неопределено,
						  Значение2 = Неопределено,
						  Значение3 = Неопределено,
						  Значение4 = Неопределено,
						  Значение5 = Неопределено,
						  Значение6 = Неопределено,
						  Значение7 = Неопределено,
						  Значение8 = Неопределено,
						  Значение9 = Неопределено
						  ) Экспорт

	Если ПустаяСтрока(СокрЛП(КлючиКонтекста)) Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;

	МассивКлючейКонтекста = ПолучитьМассивКлючейКонтекста(КлючиКонтекста);
	МассивЗначенийКонтекста = НовыйМассивЗначенийКонтекста(Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);

	Для ИндексКлюча = 0 По МассивКлючейКонтекста.ВГраница() Цикл
		ПоложитьВоВнутреннийКонтекст(МассивКлючейКонтекста[ИндексКлюча], МассивЗначенийКонтекста[ИндексКлюча]);
	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет ключи и значения для ключей в контекст
// синоним метода <ДобавитьВКонтекст>
//
// Параметры:
//   КлючиКонтекста - Строка - имена ключей контекста, например, <"Ключ1, Ключ2, Ключ3">
//   Значение1 - Произвольный - значение ключа контекста
//   Значение2 - Произвольный - значение ключа контекста
//   Значение3 - Произвольный - значение ключа контекста
//   Значение4 - Произвольный - значение ключа контекста
//   Значение5 - Произвольный - значение ключа контекста
//   Значение6 - Произвольный - значение ключа контекста
//   Значение7 - Произвольный - значение ключа контекста
//   Значение8 - Произвольный - значение ключа контекста
//   Значение9 - Произвольный - значение ключа контекста
//
// Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция Добавить(Знач КлючиКонтекста, Значение1 = Неопределено,
				Значение2 = Неопределено,
				Значение3 = Неопределено,
				Значение4 = Неопределено,
				Значение5 = Неопределено,
				Значение6 = Неопределено,
				Значение7 = Неопределено,
				Значение8 = Неопределено,
				Значение9 = Неопределено
				) Экспорт

	Возврат ДобавитьВКонтекст(КлючиКонтекста, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);

КонецФункции

// Добавляет в контекст ключи и их значения из структуры источника
//
// Параметры:
//   ВходящаяСтруктура - Структура, ФиксированнаяСтруктура - структура источник для контекста
//   КлючиИсключения - Строка - строка ключей, исключений при добавлении
//
// Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция ДобавитьИзСтруктуры(Знач ВходящаяСтруктура, Знач КлючиИсключения = "") Экспорт

	МассивКлючейИсключения = ПолучитьМассивКлючейКонтекста(КлючиИсключения);

	Для каждого КлючЗначение Из ВходящаяСтруктура Цикл

		Если Не МассивКлючейИсключения.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПоложитьВоВнутреннийКонтекст(СокрЛП(КлючЗначение.Ключ), КлючЗначение.Значение);

	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

// Создает контекст по ключа и их значениям из структуры источника
// Вызывает очистку текущего контекста
//
// Параметры:
//   ВходящаяСтруктура - Структура, ФиксированнаяСтруктура - структура источник для контекста
//   КлючиИсключения - Строка - строка ключей, исключений при добавлении
//
//  Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция ИзСтруктуры(Знач ВходящаяСтруктура, Знач КлючиИсключения = "") Экспорт

	Очистить();

	Возврат ДобавитьИзСтруктуры(ВходящаяСтруктура, КлючиИсключения);

КонецФункции

Функция ВСтруктуру(Знач КлючиСтруктуры = "", Знач КлючиИсключения = "") Экспорт

	НоваяСтруктура = Новый Структура();

	МассивКлючейСтруктуры = ПолучитьМассивКлючейКонтекста(КлючиСтруктуры);

	Если МассивКлючейСтруктуры.Количество() > 0 Тогда

		Для каждого КлючКонтекста Из МассивКлючейСтруктуры Цикл

			НоваяСтруктура.Вставить(КлючКонтекста, ПолучитьИзВнутреннегоКонтекста(КлючКонтекста));

		КонецЦикла;

	Иначе

		МассивКлючейИсключения = ПолучитьМассивКлючейКонтекста(КлючиИсключения);

		Для каждого КлючЗначение Из ВнутреннийКонтекст Цикл

			Если Не МассивКлючейИсключения.Найти(КлючЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтруктура.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);

		КонецЦикла;

	КонецЕсли;


	Возврат НоваяСтруктура;

КонецФункции

#КонецОбласти

// Получает значение контекста
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//
// Возвращаемое значение:
//   ЗначениеКонтекста - Произвольный - значение ключа контекста
//
Функция ПолучитьИзКонтекста(Знач КлючКонтекста) Экспорт

	Возврат ПолучитьИзВнутреннегоКонтекста(КлючКонтекста);

КонецФункции

// Получает значение контекста
// синоним <ПолучитьИзКонтекста>
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//
// Возвращаемое значение:
//   ЗначениеКонтекста - Произвольный - значение ключа контекста
//
Функция ИЗ_(Знач КлючКонтекста) Экспорт

	Возврат ПолучитьИзКонтекста(КлючКонтекста);

КонецФункции

// Получает значение контекста
// синоним <ПолучитьИзКонтекста>
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//
// Возвращаемое значение:
//   ЗначениеКонтекста - Произвольный - значение ключа контекста
//
Функция Получить(Знач КлючКонтекста) Экспорт

	Возврат ПолучитьИзКонтекста(КлючКонтекста);

КонецФункции

// Удаляет ключ и его значение из контекста
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//
// Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция Удалить(Знач КлючКонтекста) Экспорт

	УдалитьИзВнутреннегоКонтекста(КлючКонтекста);
	Возврат ЭтотОбъект;

КонецФункции

// Удаляет ключи и их значения из контекста
//
// Параметры:
//   КлючКонтекста - Строка - имена ключей контекста, через запятую (ключ1, Ключ2)
//
// Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция УдалитьКлючи(Знач КлючиКонтекста) Экспорт

	МассивКлючейКонтекста = ПолучитьМассивКлючейКонтекста(КлючиКонтекста);

	Для каждого КлючКонтекста Из МассивКлючейКонтекста Цикл

		УдалитьИзВнутреннегоКонтекста(КлючКонтекста);

	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции


// Получает значения контекста по переданным ключам
//
// Параметры:
//   КлючКонтекста - Строка - имена ключей контекста, через запятую (ключ1, Ключ2)
//
// Возвращаемое значение:
//   Массив - массив значений, в порядке переданных ключей
//
Функция ПолучитьЗначения(Знач КлючиКонтекста) Экспорт

	МассивКлючейКонтекста = ПолучитьМассивКлючейКонтекста(КлючиКонтекста);
	МассивЗначенийКонтекста = Новый Массив();

	Для каждого КлючКонтекста Из МассивКлючейКонтекста Цикл

		ЗначениеКонтекста = ПолучитьИзКонтекста(КлючКонтекста);

		МассивЗначенийКонтекста.Добавить(ЗначениеКонтекста);

	КонецЦикла;

	Возврат МассивЗначенийКонтекста;;

КонецФункции

// Проверяет наличие ключа в контекста и присваивает его значение в переданную переменную
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//   ПриемникЗначения - Произвольный - переменная для приема значения ключа
//
// Возвращаемое значение:
//   Булево - истина, если ключ есть в контексте
//
Функция СвойствоКлюча(Знач КлючКонтекста, ПриемникЗначения = Неопределено) Экспорт

	Возврат СвойствоВнутреннегоКонтекста(КлючКонтекста, ПриемникЗначения);

КонецФункции

// Проверяет наличие ключа в контекста и присваивает его значение в переданную переменную
// синоним <СвойствоКлюча>
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//   ПриемникЗначения - Произвольный - переменная для приема значения ключа
//
// Возвращаемое значение:
//   Булево - истина, если ключ есть в контексте
//
Функция Свойство(Знач КлючКонтекста, ПриемникЗначения = Неопределено) Экспорт

	Возврат СвойствоКлюча(КлючКонтекста, ПриемникЗначения);

КонецФункции

// Полностью очищает контекст
//
Процедура Очистить() Экспорт

	ВнутреннийКонтекст = Новый Структура();

КонецПроцедуры

// Возвращает количество ключей в контексте
//
//  Возвращаемое значение:
//   Число - количество ключей в контексте
//
Функция Количество() Экспорт

	Возврат ВнутреннийКонтекст.Количество();

КонецФункции

// Производить копирование контекста в новый контекст
//
// Возвращаемое значение:
//   Объект.Контекст - класс <Контекст>
//
Функция Скопировать(Знач РежимКопирования = 1) Экспорт

	НовыйКонтекст = Новый Контекст;

	Для каждого ЭлементКонтекста Из ВнутреннийКонтекст Цикл

		НовыйКонтекст.ПоместитьВКонтекст(ЭлементКонтекста.Ключ, КопированиеТипа.Скопировать(ЭлементКонтекста.Значение, РежимКопирования));

	КонецЦикла;

	Возврат НовыйКонтекст;

КонецФункции

// Проверяет наличие ключа в контекста
// синоним <ЕстьКлючКонтекста>
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//
// Возвращаемое значение:
//   Булево - истина, если ключ есть в контексте
//
Функция ЕстьКлюч(Знач КлючКонтекста) Экспорт

	Возврат ЕстьКлючКонтекста(КлючКонтекста);

КонецФункции

// Проверяет наличие ключа в контекста
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста
//
// Возвращаемое значение:
//   Булево - истина, если ключ есть в контексте
//
Функция ЕстьКлючКонтекста(Знач КлючКонтекста) Экспорт

	Возврат ЕстьКлючВнутреннегоКонтекста(КлючКонтекста);

КонецФункции

// Получает внутреннюю структуру контекста
//
// Возвращаемое значение:
//   Структура - скопированная структура контекста
//
Функция ПолучитьКонтекст() Экспорт
	Возврат КопированиеТипа.Скопировать(ВнутреннийКонтекст,,0);
КонецФункции

// Проверяет наличие ключа в контекста
//
// Параметры:
//   НовыйКонтекст - Структура, Контекст - ключ контекста
//
// Возвращаемое значение:
//   Булево - истина, если ключ есть в контексте
//
Функция УстановитьКонтекст(НовыйКонтекст, КлючиИсключения = "") Экспорт

	Если ТипЗнч(НовыйКонтекст) = Тип("Контекст") Тогда
		ВнутреннийКонтекст = НовыйКонтекст.ПолучитьКонтекст();
	ИначеЕсли ПроверкаТипа.ЭтоСтруктура(НовыйКонтекст) Тогда
		ВнутреннийКонтекст = КопированиеТипа.Скопировать(НовыйКонтекст, , 0);
	ИначеЕсли ПроверкаТипа.ЭтоФиксированнаяСтруктура(НовыйКонтекст) Тогда
		ВременнаяСтруктура = Новый Структура();
		ВнутреннийКонтекст = КопированиеТипа.Скопировать(НовыйКонтекст, ВременнаяСтруктура, 0);
	Иначе
		ВызватьИсключение "Не удалось установить контекст: передан не поддерживаемый тип";
	КонецЕсли;
	УдалитьКлючи(КлючиИсключения);

	Возврат ЭтотОбъект;

КонецФункции

#Область Вспомогательные_процедуры_и_функции

Функция НовыйМассивЗначенийКонтекста(Значение1 = Неопределено,
									Значение2 = Неопределено,
									Значение3 = Неопределено,
									Значение4 = Неопределено,
									Значение5 = Неопределено,
									Значение6 = Неопределено,
									Значение7 = Неопределено,
									Значение8 = Неопределено,
									Значение9 = Неопределено
									)

	МассивЗначений = Новый Массив();

	МассивЗначений.Добавить(Значение1);
	МассивЗначений.Добавить(Значение2);
	МассивЗначений.Добавить(Значение3);
	МассивЗначений.Добавить(Значение4);
	МассивЗначений.Добавить(Значение5);
	МассивЗначений.Добавить(Значение6);
	МассивЗначений.Добавить(Значение7);
	МассивЗначений.Добавить(Значение8);
	МассивЗначений.Добавить(Значение9);

	Возврат Новый ФиксированныйМассив(МассивЗначений);

КонецФункции

Процедура ПоложитьВоВнутреннийКонтекст(Знач КлючКонтекста, ЗначениеКонтекста)

	ВнутреннийКонтекст.Вставить(КлючКонтекста, ЗначениеКонтекста);

КонецПроцедуры

Функция ПолучитьИзВнутреннегоКонтекста(Знач КлючКонтекста)

	Перем ЗначениеКонтекста;

	ВнутреннийКонтекст.Свойство(КлючКонтекста, ЗначениеКонтекста);

	Возврат ЗначениеКонтекста;

КонецФункции

Процедура УдалитьИзВнутреннегоКонтекста(Знач КлючКонтекста)

	Если ЕстьКлючВнутреннегоКонтекста(КлючКонтекста) Тогда
		ВнутреннийКонтекст.Удалить(КлючКонтекста);
	КонецЕсли;

КонецПроцедуры

Функция ЕстьКлючВнутреннегоКонтекста(Знач КлючКонтекста)

	Возврат ВнутреннийКонтекст.Свойство(КлючКонтекста);

КонецФункции

Функция СвойствоВнутреннегоКонтекста(Знач КлючКонтекста, ЗначениеКонтекста = Неопределено)

	Возврат ВнутреннийКонтекст.Свойство(КлючКонтекста, ЗначениеКонтекста);

КонецФункции

Функция ПолучитьМассивКлючейКонтекста(Знач КлючиКонтекста)

	МассивКлючейКонтекста = СтрРазделить(КлючиКонтекста, ",", Ложь);

	Для ИндексКлюча = 0 По МассивКлючейКонтекста.ВГраница() Цикл
		МассивКлючейКонтекста[ИндексКлюча] = СокрЛП(МассивКлючейКонтекста[ИндексКлюча]);
	КонецЦикла;

	Возврат МассивКлючейКонтекста;

КонецФункции

Процедура ПриСозданииОбъекта()

	ВнутреннийКонтекст = Новый Структура();

КонецПроцедуры

#КонецОбласти